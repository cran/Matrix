diff -ruN src/SuiteSparse/CHOLMOD/Include/cholmod.h src/SuiteSparse-patched/CHOLMOD/Include/cholmod.h
--- src/SuiteSparse/CHOLMOD/Include/cholmod.h	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/Include/cholmod.h	2024-01-12 11:54:13
@@ -1419,8 +1419,8 @@
     int sorted,         // ignored; C is now always returned as sorted
     cholmod_common *Common
 ) ;
-cholmod_sparse *cholmod_l_add (cholmod_sparse *, cholmod_sparse *, double *,
-    double *, int, int, cholmod_common *) ;
+cholmod_sparse *cholmod_l_add (cholmod_sparse *, cholmod_sparse *, double [2],
+    double [2], int, int, cholmod_common *) ;
 
 //------------------------------------------------------------------------------
 // cholmod_sparse_xtype: change the xtype and/or dtype of a sparse matrix
@@ -2695,7 +2695,7 @@
     cholmod_factor *L,  // resulting factorization
     cholmod_common *Common
 ) ;
-int cholmod_l_factorize_p (cholmod_sparse *, double *, int64_t *, size_t,
+int cholmod_l_factorize_p (cholmod_sparse *, double [2], int64_t *, size_t,
     cholmod_factor *, cholmod_common *) ;
 
 //------------------------------------------------------------------------------
@@ -2893,7 +2893,7 @@
     cholmod_factor *L,
     cholmod_common *Common
 ) ;
-int cholmod_l_rowfac (cholmod_sparse *, cholmod_sparse *, double *, size_t,
+int cholmod_l_rowfac (cholmod_sparse *, cholmod_sparse *, double [2], size_t,
     size_t, cholmod_factor *, cholmod_common *) ;
 
 //------------------------------------------------------------------------------
@@ -2918,7 +2918,7 @@
     cholmod_factor *L,
     cholmod_common *Common
 ) ;
-int cholmod_l_rowfac_mask (cholmod_sparse *, cholmod_sparse *, double *,
+int cholmod_l_rowfac_mask (cholmod_sparse *, cholmod_sparse *, double [2],
     size_t, size_t, int64_t *, int64_t *, cholmod_factor *, cholmod_common *) ;
 
 int cholmod_rowfac_mask2
@@ -2937,7 +2937,7 @@
     cholmod_factor *L,
     cholmod_common *Common
 ) ;
-int cholmod_l_rowfac_mask2 (cholmod_sparse *, cholmod_sparse *, double *,
+int cholmod_l_rowfac_mask2 (cholmod_sparse *, cholmod_sparse *, double [2],
     size_t, size_t, int64_t *, int64_t, int64_t *, cholmod_factor *,
     cholmod_common *) ;
 
@@ -3202,7 +3202,7 @@
     cholmod_dense *Y,   // resulting dense matrix
     cholmod_common *Common
 ) ;
-int cholmod_l_sdmult (cholmod_sparse *, int, double *, double *,
+int cholmod_l_sdmult (cholmod_sparse *, int, double [2], double [2],
     cholmod_dense *, cholmod_dense *Y, cholmod_common *) ;
 
 //------------------------------------------------------------------------------
@@ -3502,7 +3502,7 @@
     cholmod_dense *DeltaB,  // change in b, zero on output
     cholmod_common *Common
 ) ;
-int cholmod_l_rowadd_solve (size_t, cholmod_sparse *, double *,
+int cholmod_l_rowadd_solve (size_t, cholmod_sparse *, double [2],
     cholmod_factor *, cholmod_dense *, cholmod_dense *, cholmod_common *) ;
 
 //------------------------------------------------------------------------------
@@ -3526,7 +3526,7 @@
     cholmod_dense *DeltaB,  // change in b, zero on output
     cholmod_common *Common
 ) ;
-int cholmod_l_rowadd_mark (size_t, cholmod_sparse *, double *, int64_t *,
+int cholmod_l_rowadd_mark (size_t, cholmod_sparse *, double [2], int64_t *,
     cholmod_factor *, cholmod_dense *, cholmod_dense *, cholmod_common *) ;
 
 //------------------------------------------------------------------------------
@@ -3573,7 +3573,7 @@
     cholmod_dense *DeltaB,  // change in b, zero on output
     cholmod_common *Common
 ) ;
-int cholmod_l_rowdel_solve (size_t, cholmod_sparse *, double *,
+int cholmod_l_rowdel_solve (size_t, cholmod_sparse *, double [2],
     cholmod_factor *, cholmod_dense *, cholmod_dense *, cholmod_common *) ;
 
 //------------------------------------------------------------------------------
@@ -3597,7 +3597,7 @@
     cholmod_dense *DeltaB,  // change in b, zero on output
     cholmod_common *Common
 ) ;
-int cholmod_l_rowdel_mark (size_t, cholmod_sparse *, double *, int64_t *,
+int cholmod_l_rowdel_mark (size_t, cholmod_sparse *, double [2], int64_t *,
     cholmod_factor *, cholmod_dense *, cholmod_dense *, cholmod_common *) ;
 
 #endif
@@ -3927,7 +3927,7 @@
     cholmod_factor *L,  // factorization
     cholmod_common *Common
 ) ;
-int cholmod_l_super_numeric (cholmod_sparse *, cholmod_sparse *, double *,
+int cholmod_l_super_numeric (cholmod_sparse *, cholmod_sparse *, double [2],
     cholmod_factor *, cholmod_common *) ;
 
 //------------------------------------------------------------------------------
diff -ruN src/SuiteSparse/CHOLMOD/Makefile src/SuiteSparse-patched/CHOLMOD/Makefile
--- src/SuiteSparse/CHOLMOD/Makefile	1969-12-31 19:00:00
+++ src/SuiteSparse-patched/CHOLMOD/Makefile	2024-01-12 11:54:13
@@ -0,0 +1,128 @@
+sources = \
+	Check/cholmod_check.c Check/cholmod_l_check.c \
+	Check/cholmod_read.c  Check/cholmod_l_read.c \
+	Check/cholmod_write.c Check/cholmod_l_write.c \
+	Cholesky/cholmod_amd.c          Cholesky/cholmod_l_amd.c \
+	Cholesky/cholmod_analyze.c      Cholesky/cholmod_l_analyze.c \
+	Cholesky/cholmod_colamd.c       Cholesky/cholmod_l_colamd.c \
+	Cholesky/cholmod_etree.c        Cholesky/cholmod_l_etree.c \
+	Cholesky/cholmod_factorize.c    Cholesky/cholmod_l_factorize.c \
+	Cholesky/cholmod_postorder.c    Cholesky/cholmod_l_postorder.c \
+	Cholesky/cholmod_rcond.c        Cholesky/cholmod_l_rcond.c \
+	Cholesky/cholmod_resymbol.c     Cholesky/cholmod_l_resymbol.c \
+	Cholesky/cholmod_rowcolcounts.c Cholesky/cholmod_l_rowcolcounts.c \
+	Cholesky/cholmod_rowfac.c       Cholesky/cholmod_l_rowfac.c \
+	Cholesky/cholmod_solve.c        Cholesky/cholmod_l_solve.c \
+	Cholesky/cholmod_spsolve.c      Cholesky/cholmod_l_spsolve.c \
+	Utility/cholmod_aat.c                Utility/cholmod_l_aat.c \
+	Utility/cholmod_add.c                Utility/cholmod_l_add.c \
+	Utility/cholmod_add_size_t.c         Utility/cholmod_l_add_size_t.c \
+	Utility/cholmod_alloc_factor.c       Utility/cholmod_l_alloc_factor.c \
+	Utility/cholmod_alloc_work.c         Utility/cholmod_l_alloc_work.c \
+	Utility/cholmod_allocate_dense.c     Utility/cholmod_l_allocate_dense.c \
+	Utility/cholmod_allocate_factor.c    Utility/cholmod_l_allocate_factor.c \
+	Utility/cholmod_allocate_sparse.c    Utility/cholmod_l_allocate_sparse.c \
+	Utility/cholmod_allocate_triplet.c   Utility/cholmod_l_allocate_triplet.c \
+	Utility/cholmod_allocate_work.c      Utility/cholmod_l_allocate_work.c \
+	Utility/cholmod_band.c               Utility/cholmod_l_band.c \
+	Utility/cholmod_band_nnz.c           Utility/cholmod_l_band_nnz.c \
+	Utility/cholmod_calloc.c             Utility/cholmod_l_calloc.c \
+	Utility/cholmod_change_factor.c      Utility/cholmod_l_change_factor.c \
+	Utility/cholmod_clear_flag.c         Utility/cholmod_l_clear_flag.c \
+	Utility/cholmod_copy.c               Utility/cholmod_l_copy.c \
+	Utility/cholmod_copy_dense.c         Utility/cholmod_l_copy_dense.c \
+	Utility/cholmod_copy_dense2.c        Utility/cholmod_l_copy_dense2.c \
+	Utility/cholmod_copy_factor.c        Utility/cholmod_l_copy_factor.c \
+	Utility/cholmod_copy_sparse.c        Utility/cholmod_l_copy_sparse.c \
+	Utility/cholmod_copy_triplet.c       Utility/cholmod_l_copy_triplet.c \
+	Utility/cholmod_cumsum.c             Utility/cholmod_l_cumsum.c \
+	Utility/cholmod_dbound.c             Utility/cholmod_l_dbound.c \
+	Utility/cholmod_defaults.c           Utility/cholmod_l_defaults.c \
+	Utility/cholmod_dense_nnz.c          Utility/cholmod_l_dense_nnz.c \
+	Utility/cholmod_dense_to_sparse.c    Utility/cholmod_l_dense_to_sparse.c \
+	Utility/cholmod_divcomplex.c         Utility/cholmod_l_divcomplex.c \
+	Utility/cholmod_ensure_dense.c       Utility/cholmod_l_ensure_dense.c \
+	Utility/cholmod_error.c              Utility/cholmod_l_error.c \
+	Utility/cholmod_eye.c                Utility/cholmod_l_eye.c \
+	Utility/cholmod_factor_to_sparse.c   Utility/cholmod_l_factor_to_sparse.c \
+	Utility/cholmod_finish.c             Utility/cholmod_l_finish.c \
+	Utility/cholmod_free.c               Utility/cholmod_l_free.c \
+	Utility/cholmod_free_dense.c         Utility/cholmod_l_free_dense.c \
+	Utility/cholmod_free_factor.c        Utility/cholmod_l_free_factor.c \
+	Utility/cholmod_free_sparse.c        Utility/cholmod_l_free_sparse.c \
+	Utility/cholmod_free_triplet.c       Utility/cholmod_l_free_triplet.c \
+	Utility/cholmod_free_work.c          Utility/cholmod_l_free_work.c \
+	Utility/cholmod_hypot.c              Utility/cholmod_l_hypot.c \
+	Utility/cholmod_malloc.c             Utility/cholmod_l_malloc.c \
+	Utility/cholmod_maxrank.c            Utility/cholmod_l_maxrank.c \
+	Utility/cholmod_memdebug.c \
+	Utility/cholmod_mult_size_t.c        Utility/cholmod_l_mult_size_t.c \
+	Utility/cholmod_mult_uint64_t.c \
+	Utility/cholmod_nnz.c                Utility/cholmod_l_nnz.c \
+	Utility/cholmod_ones.c               Utility/cholmod_l_ones.c \
+	Utility/cholmod_pack_factor.c        Utility/cholmod_l_pack_factor.c \
+	Utility/cholmod_ptranspose.c         Utility/cholmod_l_ptranspose.c \
+	Utility/cholmod_realloc.c            Utility/cholmod_l_realloc.c \
+	Utility/cholmod_realloc_multiple.c   Utility/cholmod_l_realloc_multiple.c \
+	Utility/cholmod_reallocate_column.c  Utility/cholmod_l_reallocate_column.c \
+	Utility/cholmod_reallocate_factor.c  Utility/cholmod_l_reallocate_factor.c \
+	Utility/cholmod_reallocate_sparse.c  Utility/cholmod_l_reallocate_sparse.c \
+	Utility/cholmod_reallocate_triplet.c Utility/cholmod_l_reallocate_triplet.c \
+	Utility/cholmod_sbound.c             Utility/cholmod_l_sbound.c \
+	Utility/cholmod_score_comp.c         Utility/cholmod_l_score_comp.c \
+	Utility/cholmod_set_empty.c          Utility/cholmod_l_set_empty.c \
+	Utility/cholmod_sort.c               Utility/cholmod_l_sort.c \
+	Utility/cholmod_sparse_to_dense.c    Utility/cholmod_l_sparse_to_dense.c \
+	Utility/cholmod_sparse_to_triplet.c  Utility/cholmod_l_sparse_to_triplet.c \
+	Utility/cholmod_speye.c              Utility/cholmod_l_speye.c \
+	Utility/cholmod_spzeros.c            Utility/cholmod_l_spzeros.c \
+	Utility/cholmod_start.c              Utility/cholmod_l_start.c \
+	Utility/cholmod_transpose.c          Utility/cholmod_l_transpose.c \
+	Utility/cholmod_transpose_sym.c      Utility/cholmod_l_transpose_sym.c \
+	Utility/cholmod_transpose_unsym.c    Utility/cholmod_l_transpose_unsym.c \
+	Utility/cholmod_triplet_to_sparse.c  Utility/cholmod_l_triplet_to_sparse.c \
+	Utility/cholmod_version.c            Utility/cholmod_l_version.c \
+	Utility/cholmod_xtype.c              Utility/cholmod_l_xtype.c \
+	Utility/cholmod_zeros.c              Utility/cholmod_l_zeros.c \
+	MatrixOps/cholmod_drop.c      MatrixOps/cholmod_l_drop.c \
+	MatrixOps/cholmod_horzcat.c   MatrixOps/cholmod_l_horzcat.c \
+	MatrixOps/cholmod_norm.c      MatrixOps/cholmod_l_norm.c \
+	MatrixOps/cholmod_scale.c     MatrixOps/cholmod_l_scale.c \
+	MatrixOps/cholmod_sdmult.c    MatrixOps/cholmod_l_sdmult.c \
+	MatrixOps/cholmod_ssmult.c    MatrixOps/cholmod_l_ssmult.c \
+	MatrixOps/cholmod_submatrix.c MatrixOps/cholmod_l_submatrix.c \
+	MatrixOps/cholmod_symmetry.c  MatrixOps/cholmod_l_symmetry.c \
+	MatrixOps/cholmod_vertcat.c   MatrixOps/cholmod_l_vertcat.c \
+	Modify/cholmod_rowadd.c Modify/cholmod_l_rowadd.c \
+	Modify/cholmod_rowdel.c Modify/cholmod_l_rowdel.c \
+	Modify/cholmod_updown.c Modify/cholmod_l_updown.c \
+	Partition/cholmod_camd.c          Partition/cholmod_l_camd.c \
+	Partition/cholmod_ccolamd.c       Partition/cholmod_l_ccolamd.c \
+	Partition/cholmod_csymamd.c       Partition/cholmod_l_csymamd.c \
+	Partition/cholmod_metis.c         Partition/cholmod_l_metis.c \
+	Partition/cholmod_metis_wrapper.c \
+	Partition/cholmod_nesdis.c        Partition/cholmod_l_nesdis.c \
+	Supernodal/cholmod_super_numeric.c  Supernodal/cholmod_l_super_numeric.c \
+	Supernodal/cholmod_super_solve.c    Supernodal/cholmod_l_super_solve.c \
+	Supernodal/cholmod_super_symbolic.c Supernodal/cholmod_l_super_symbolic.c
+objects = $(sources:.c=.o)
+archive = CHOLMOD.a
+
+PKG_CPPFLAGS = -I./Include -I../SuiteSparse_config \
+	-I../AMD/Include -I../COLAMD/Include \
+	-I../CAMD/Include -I../CCOLAMD/Include \
+	-I. -I./SuiteSparse_metis/include \
+	-I./SuiteSparse_metis/GKlib -I./SuiteSparse_metis/libmetis
+
+all : $(archive)
+
+$(archive) : $(objects)
+	rm -f $@
+	$(AR) -cr $@ $(objects)
+	$(RANLIB) $@
+
+.c.o :
+	$(CC) $(PKG_CPPFLAGS) $(CPPFLAGS) $(CFLAGS) -c $< -o $*.o
+
+clean :
+	@rm -f $(objects) $(archive)
diff -ruN src/SuiteSparse/CHOLMOD/MatrixOps/t_cholmod_sdmult_worker.c src/SuiteSparse-patched/CHOLMOD/MatrixOps/t_cholmod_sdmult_worker.c
--- src/SuiteSparse/CHOLMOD/MatrixOps/t_cholmod_sdmult_worker.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/MatrixOps/t_cholmod_sdmult_worker.c	2024-01-12 11:54:13
@@ -76,7 +76,7 @@
     size_t dy = Y->d ;
     size_t dx = X->d ;
     Real *w = W ;
-    Real *Wz = W + 4*nx ;
+    Real *Wz = (W) ? W + 4*nx : W ;
 
     //--------------------------------------------------------------------------
     // Y = beta * Y
diff -ruN src/SuiteSparse/CHOLMOD/Partition/cholmod_metis_wrapper.h src/SuiteSparse-patched/CHOLMOD/Partition/cholmod_metis_wrapper.h
--- src/SuiteSparse/CHOLMOD/Partition/cholmod_metis_wrapper.h	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/Partition/cholmod_metis_wrapper.h	2024-01-12 11:54:13
@@ -16,15 +16,6 @@
 #define USE_GKRAND
 #endif
 
-#if defined ( __GNUC__ ) && !defined ( __clang__ )
-    // disable memcpy warnings:
-    #pragma GCC diagnostic ignored "-Wstringop-overflow="
-    // csr.c has misleading indentation:
-    #pragma GCC diagnostic ignored "-Wmisleading-indentation"
-    // GKlib/error.c:
-    #pragma GCC diagnostic ignored "-Wunused-result"
-#endif
-
 #if SUITESPARSE_COMPILER_MSC
     #undef  __thread
     #define __thread __declspec(thread)
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/csr.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/csr.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/csr.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/csr.c	2024-01-12 11:54:13
@@ -16,7 +16,7 @@
     \returns the allocated matrix. The various fields are set to NULL.
 */
 /**************************************************************************/
-gk_csr_t *gk_csr_Create()
+gk_csr_t *gk_csr_Create(void)
 {
   gk_csr_t *mat;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/error.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/error.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/error.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/error.c	2024-01-12 11:54:13
@@ -95,7 +95,7 @@
     of a longjmp
 */
 /***************************************************************************/
-int gk_sigtrap() 
+int gk_sigtrap(void) 
 {
   if (gk_cur_jbufs+1 >= MAX_JBUFS)
     return 0;
@@ -113,7 +113,7 @@
 /*! This function sets the handlers for the signals to their default handlers
  */
 /***************************************************************************/
-int gk_siguntrap() 
+int gk_siguntrap(void) 
 {
   if (gk_cur_jbufs == -1)
     return 0;
@@ -142,7 +142,7 @@
 * This function sets a number of signal handlers and sets the return point 
 * of a longjmp
 ****************************************************************************/
-void gk_SetSignalHandlers() 
+void gk_SetSignalHandlers(void) 
 {
   old_SIGMEM_handler = signal(SIGMEM,  gk_NonLocalExit_Handler);
   old_SIGERR_handler = signal(SIGERR,  gk_NonLocalExit_Handler);
@@ -152,7 +152,7 @@
 /***************************************************************************
 * This function sets the handlers for the signals to their default handlers
 ****************************************************************************/
-void gk_UnsetSignalHandlers() 
+void gk_UnsetSignalHandlers(void) 
 {
   signal(SIGMEM,  old_SIGMEM_handler);
   signal(SIGERR,  old_SIGERR_handler);
@@ -198,7 +198,7 @@
 /*************************************************************************
 * This function prints a backtrace of calling functions
 **************************************************************************/
-void PrintBackTrace()
+void PrintBackTrace(void)
 {
 #ifdef HAVE_EXECINFO_H
   void *array[10];
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_getopt.h src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_getopt.h
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_getopt.h	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_getopt.h	2024-01-12 11:54:13
@@ -52,11 +52,9 @@
 
 
 /* Function prototypes */
-extern int gk_getopt(int __argc, char **__argv, char *__shortopts);
-extern int gk_getopt_long(int __argc, char **__argv, char *__shortopts,
-              struct gk_option *__longopts, int *__longind);
-extern int gk_getopt_long_only (int __argc, char **__argv,
-              char *__shortopts, struct gk_option *__longopts, int *__longind);
+int gk_getopt(int, char **, char *);
+int gk_getopt_long(int, char **, char *, struct gk_option *, int *);
+int gk_getopt_long_only (int, char **, char *, struct gk_option *, int *);
 
 
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkrandom.h src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkrandom.h
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkrandom.h	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkrandom.h	2024-01-12 11:54:13
@@ -33,7 +33,7 @@
 /*************************************************************************/\
 /*! Returns a random number */ \
 /**************************************************************************/\
-RNGT FPRFX ## rand() \
+RNGT FPRFX ## rand(void) \
 {\
   if (sizeof(RNGT) <= sizeof(int32_t)) \
     return (RNGT)gk_randint32(); \
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gkregex.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gkregex.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gkregex.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gkregex.c	2024-01-12 11:54:13
@@ -19,7 +19,7 @@
    02111-1307 USA.  */
 
 /* this is for removing a compiler warning */
-void gkfooo() { return; }
+void gkfooo(void) { return; }
 
 #ifdef USE_GKREGEX
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/graph.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/graph.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/graph.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/graph.c	2024-01-12 11:54:13
@@ -16,7 +16,7 @@
     \returns the allocated graph. The various fields are set to NULL.
 */
 /**************************************************************************/
-gk_graph_t *gk_graph_Create()
+gk_graph_t *gk_graph_Create(void)
 {
   gk_graph_t *graph;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/mcore.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/mcore.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/mcore.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/mcore.c	2024-01-12 11:54:13
@@ -40,7 +40,7 @@
 /*! This function creates an mcore. This version is used for gkmcore.
  */
 /*************************************************************************/
-gk_mcore_t *gk_gkmcoreCreate()
+gk_mcore_t *gk_gkmcoreCreate(void)
 {
   gk_mcore_t *mcore;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/memory.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/memory.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/memory.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/memory.c	2024-01-12 11:54:13
@@ -96,7 +96,7 @@
 /*! This function initializes tracking of heap allocations. 
 */
 /*************************************************************************/
-int gk_malloc_init()
+int gk_malloc_init(void)
 {
 #if 1
   // Revised for SuiteSparse: do not create gkmcore:
@@ -235,7 +235,7 @@
 * This function returns the current ammount of dynamically allocated
 * memory that is used by the system
 **************************************************************************/
-size_t gk_GetCurMemoryUsed()
+size_t gk_GetCurMemoryUsed(void)
 {
   if (gkmcore == NULL)
     return 0;
@@ -248,7 +248,7 @@
 * This function returns the maximum ammount of dynamically allocated 
 * memory that was used by the system
 **************************************************************************/
-size_t gk_GetMaxMemoryUsed()
+size_t gk_GetMaxMemoryUsed(void)
 {
   if (gkmcore == NULL)
     return 0;
diff -ruN src/SuiteSparse/CHOLMOD/Supernodal/cholmod_super_numeric.c src/SuiteSparse-patched/CHOLMOD/Supernodal/cholmod_super_numeric.c
--- src/SuiteSparse/CHOLMOD/Supernodal/cholmod_super_numeric.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/Supernodal/cholmod_super_numeric.c	2024-01-12 11:54:13
@@ -82,15 +82,6 @@
 #define ZOMPLEX
 #include "t_cholmod_super_numeric_worker.c"
 
-#undef  DOUBLE
-#define SINGLE
-#define REAL
-#include "t_cholmod_super_numeric_worker.c"
-#define COMPLEX
-#include "t_cholmod_super_numeric_worker.c"
-#define ZOMPLEX
-#include "t_cholmod_super_numeric_worker.c"
-
 //------------------------------------------------------------------------------
 // cholmod_super_numeric
 //------------------------------------------------------------------------------
@@ -297,16 +288,16 @@
     switch ((A->xtype + A->dtype) % 8)
     {
         case CHOLMOD_REAL    + CHOLMOD_SINGLE:
-            ok = rs_cholmod_super_numeric_worker (A, F, s_beta, L, C, Common) ;
+            ok = FALSE ;
             break ;
 
         case CHOLMOD_COMPLEX + CHOLMOD_SINGLE:
-            ok = cs_cholmod_super_numeric_worker (A, F, s_beta, L, C, Common) ;
+            ok = FALSE ;
             break ;
 
         case CHOLMOD_ZOMPLEX + CHOLMOD_SINGLE:
             // A is zomplex, but L is complex
-            ok = zs_cholmod_super_numeric_worker (A, F, s_beta, L, C, Common) ;
+            ok = FALSE ;
             break ;
 
         case CHOLMOD_REAL    + CHOLMOD_DOUBLE:
diff -ruN src/SuiteSparse/CHOLMOD/Supernodal/cholmod_super_solve.c src/SuiteSparse-patched/CHOLMOD/Supernodal/cholmod_super_solve.c
--- src/SuiteSparse/CHOLMOD/Supernodal/cholmod_super_solve.c	2024-01-10 19:08:51
+++ src/SuiteSparse-patched/CHOLMOD/Supernodal/cholmod_super_solve.c	2024-01-12 11:54:13
@@ -30,13 +30,6 @@
 #define COMPLEX
 #include "t_cholmod_super_solve_worker.c"
 
-#undef  DOUBLE
-#define SINGLE
-#define REAL
-#include "t_cholmod_super_solve_worker.c"
-#define COMPLEX
-#include "t_cholmod_super_solve_worker.c"
-
 //------------------------------------------------------------------------------
 // cholmod_super_lsolve: solve x=L\b
 //------------------------------------------------------------------------------
@@ -114,11 +107,11 @@
     switch ((L->xtype + L->dtype) % 8)
     {
         case CHOLMOD_REAL    + CHOLMOD_SINGLE:
-            rs_cholmod_super_lsolve_worker (L, X, E, Common) ;
+            return FALSE ;
             break ;
 
         case CHOLMOD_COMPLEX + CHOLMOD_SINGLE:
-            cs_cholmod_super_lsolve_worker (L, X, E, Common) ;
+            return FALSE ;
             break ;
 
         case CHOLMOD_REAL    + CHOLMOD_DOUBLE:
@@ -215,11 +208,11 @@
     switch ((L->xtype + L->dtype) % 8)
     {
         case CHOLMOD_REAL    + CHOLMOD_SINGLE:
-            rs_cholmod_super_ltsolve_worker (L, X, E, Common) ;
+            return FALSE ;
             break ;
 
         case CHOLMOD_COMPLEX + CHOLMOD_SINGLE:
-            cs_cholmod_super_ltsolve_worker (L, X, E, Common) ;
+            return FALSE ;
             break ;
 
         case CHOLMOD_REAL    + CHOLMOD_DOUBLE:
